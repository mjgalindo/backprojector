cmake_minimum_required(VERSION 3.11)

project(backprojector LANGUAGES CXX CUDA)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
set (CMAKE_CXX_EXTENSIONS OFF)
set(CUDA_COMPUTE_CAPABILITY 52 CACHE STRING "Cuda compute capability for the build")

add_executable(backprojector main.cpp)
target_compile_features(backprojector PUBLIC cxx_std_14)
add_library(cudabp SHARED backproject_cuda.cu)
add_library(cudabp_static STATIC backproject_cuda.cu)

set_target_properties(cudabp PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
target_include_directories(cudabp PRIVATE /opt/cuda/samples/common/inc/)
target_include_directories(cudabp_static PRIVATE /opt/cuda/samples/common/inc/)
target_compile_features(cudabp PUBLIC cxx_std_11)
target_compile_features(cudabp_static PUBLIC cxx_std_11)
target_compile_options(cudabp PRIVATE $<$<CONFIG:Debug>:-G> -gencode arch=compute_${CUDA_COMPUTE_CAPABILITY},code=sm_${CUDA_COMPUTE_CAPABILITY})
target_compile_options(cudabp_static PRIVATE $<$<CONFIG:Debug>:-G> -gencode arch=compute_${CUDA_COMPUTE_CAPABILITY},code=sm_${CUDA_COMPUTE_CAPABILITY})

find_package(OpenMP REQUIRED)
find_package(HDF5 REQUIRED COMPONENTS CXX)
target_include_directories(backprojector PRIVATE ${HDF5_INCLUDE_DIRS} xtl/include xtensor/include)
if (WIN32)
    STRING(REGEX REPLACE "(.+)/.+.lib;.+" "\\1" HDF5_LIBRARY_DIR "${HDF5_LIBRARIES}")
    target_link_libraries(backprojector PRIVATE OpenMP::OpenMP_CXX cudabp_static 
        "${HDF5_LIBRARY_DIR}/libhdf5.lib;${HDF5_LIBRARY_DIR}/libhdf5_cpp.lib;${HDF5_LIBRARY_DIR}/libzlib.lib;${HDF5_LIBRARY_DIR}/libszip.lib")
else()
    target_link_libraries(backprojector PRIVATE OpenMP::OpenMP_CXX ${HDF5_LIBRARIES} cudabp_static)
endif(WIN32)

find_package(NumPy REQUIRED)
if (NUMPY_FOUND)
    message("Python bindings will be built")
    add_subdirectory(pybind11)
    pybind11_add_module(nlosbpy nlosbpy.cpp)
    target_compile_features(nlosbpy PUBLIC cxx_std_14)
    target_include_directories(nlosbpy PRIVATE ${NUMPY_INCLUDE_DIRS} xtl/include xtensor/include xtensor-python/include)
    target_link_libraries(nlosbpy PRIVATE OpenMP::OpenMP_CXX cudabp)
    install(TARGETS nlosbpy DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
endif(NUMPY_FOUND)

install(TARGETS backprojector DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
install(TARGETS cudabp DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
install(FILES backproject.hpp backproject_cuda.hpp DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
